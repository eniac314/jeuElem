var _user$project$View$winLose = function (_p0) {
	var _p1 = _p0;
	var makeTd = function (_p2) {
		var _p3 = _p2;
		var _p4 = _p3._1;
		var color = _elm_lang$core$Native_Utils.eq(_p4, 1) ? 'lightGreen' : (_elm_lang$core$Native_Utils.eq(_p4, 2) ? 'green' : (_elm_lang$core$Native_Utils.eq(_p4, -1) ? 'gold' : (_elm_lang$core$Native_Utils.eq(_p4, -2) ? 'darkOrange' : 'white')));
		return A2(
			_elm_lang$html$Html$td,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'background-image',
							_1: A2(
								_elm_lang$core$Basics_ops['++'],
								'url(\'images/pieces/piece',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(_p3._0),
									'.png\')'))
						},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'background-color', _1: color},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'width', _1: '50px'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'height', _1: '50px'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'background-size', _1: 'contain'},
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			},
			{ctor: '[]'});
	};
	var _p5 = A3(
		_elm_lang$core$Dict$foldr,
		F3(
			function (_p7, res, _p6) {
				var _p8 = _p7;
				var _p13 = _p8._1;
				var _p12 = _p8._0;
				var _p9 = _p6;
				var _p11 = _p9._1;
				var _p10 = _p9._0;
				return ((!_elm_lang$core$Native_Utils.eq(_p12, _p1.value)) || _elm_lang$core$Native_Utils.eq(_p12, _p13)) ? {ctor: '_Tuple2', _0: _p10, _1: _p11} : ((_elm_lang$core$Native_Utils.cmp(res, 0) > 0) ? {
					ctor: '_Tuple2',
					_0: _p10,
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: _p13, _1: res},
						_1: _p11
					}
				} : {
					ctor: '_Tuple2',
					_0: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: _p13, _1: res},
						_1: _p10
					},
					_1: _p11
				});
			}),
		{
			ctor: '_Tuple2',
			_0: {ctor: '[]'},
			_1: {ctor: '[]'}
		},
		_user$project$Data$shifumiTable);
	var losers = _p5._0;
	var winners = _p5._1;
	var losersTd = A2(_elm_lang$core$List$map, makeTd, losers);
	var winnersTd = A2(_elm_lang$core$List$map, makeTd, winners);
	return A2(
		_elm_lang$html$Html$table,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'margin', _1: 'auto'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'border-style', _1: 'solid'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'border-color', _1: 'black'},
							_1: {ctor: '[]'}
						}
					}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$tr,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$td,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('loses to '),
							_1: {ctor: '[]'}
						}),
					_1: losersTd
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$tr,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$td,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('wins against '),
								_1: {ctor: '[]'}
							}),
						_1: winnersTd
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$View$color = function (n) {
	var blue = (_elm_lang$core$Basics$sin(((4 * _elm_lang$core$Basics$pi) * n) / 3) * 127) + 128;
	var green = (_elm_lang$core$Basics$sin(((2 * _elm_lang$core$Basics$pi) * n) / 3) * 127) + 128;
	var red = (_elm_lang$core$Basics$sin(n) * 127) + 128;
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'rgb(',
		A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(
				_elm_lang$core$Basics$round(red)),
			A2(
				_elm_lang$core$Basics_ops['++'],
				', ',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(
						_elm_lang$core$Basics$round(green)),
					A2(
						_elm_lang$core$Basics_ops['++'],
						', ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(
								_elm_lang$core$Basics$round(blue)),
							')'))))));
};
var _user$project$View$scores = function (model) {
	var scoresDict = A3(
		_elm_lang$core$Dict$foldr,
		F3(
			function (k, v, acc) {
				var _p14 = v.state;
				if (_p14.ctor === 'Contain') {
					return A3(
						_elm_lang$core$Dict$update,
						_p14._0.playerId,
						function (mv) {
							var _p15 = mv;
							if (_p15.ctor === 'Nothing') {
								return _elm_lang$core$Maybe$Just(1);
							} else {
								return _elm_lang$core$Maybe$Just(_p15._0 + 1);
							}
						},
						acc);
				} else {
					return acc;
				}
			}),
		_elm_lang$core$Dict$empty,
		model.board);
	return A2(
		_elm_lang$html$Html$table,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'float', _1: 'right'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'vertical-align', _1: 'top'},
						_1: {ctor: '[]'}
					}
				}),
			_1: {ctor: '[]'}
		},
		A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$tr,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$td,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('playerId'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$td,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('score'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}),
				_1: {ctor: '[]'}
			},
			A3(
				_elm_lang$core$Dict$foldr,
				F3(
					function (k, v, acc) {
						return {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$tr,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$td,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {
														ctor: '_Tuple2',
														_0: 'background-color',
														_1: _user$project$View$color(
															0.7 * _elm_lang$core$Basics$toFloat(k))
													},
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text(
												_elm_lang$core$Basics$toString(k)),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$td,
											{ctor: '[]'},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(
													_elm_lang$core$Basics$toString(v)),
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									}
								}),
							_1: acc
						};
					}),
				{ctor: '[]'},
				scoresDict)));
};
var _user$project$View$playerColor = function (playerId) {
	return _user$project$View$color(
		0.7 * _elm_lang$core$Basics$toFloat(playerId));
};
var _user$project$View$piecesPatterns = A2(
	_elm_lang$core$List$map,
	function (n) {
		return A2(
			_elm_lang$svg$Svg$pattern,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$id(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'piece',
						_elm_lang$core$Basics$toString(n))),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$x('0%'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$y('0%'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$width('100%'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$height('100%'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 100 100'),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$image,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$x('10'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$y('10'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$height('80'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$width('80'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$xlinkHref(
											A2(
												_elm_lang$core$Basics_ops['++'],
												'images/pieces/piece',
												A2(
													_elm_lang$core$Basics_ops['++'],
													_elm_lang$core$Basics$toString(n),
													'.png'))),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			});
	},
	A2(_elm_lang$core$List$range, 0, 14));
var _user$project$View$pieceSvg = function (_p16) {
	var _p17 = _p16;
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'value: ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(_p17.value),
						A2(
							_elm_lang$core$Basics_ops['++'],
							'playerId: ',
							_elm_lang$core$Basics$toString(_p17.playerId))))),
			_1: {ctor: '[]'}
		});
};
var _user$project$View$selectedHexaSvg = F2(
	function (radius, _p18) {
		var _p19 = _p18;
		var points = A3(
			_elm_lang$core$List$foldr,
			F2(
				function (_p20, acc) {
					var _p21 = _p20;
					return A2(
						_elm_lang$core$Basics_ops['++'],
						acc,
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(_p21._0),
							A2(
								_elm_lang$core$Basics_ops['++'],
								', ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(_p21._1),
									' '))));
				}),
			'',
			A2(
				_elm_lang$core$List$map,
				function (_p22) {
					var _p23 = _p22;
					return {ctor: '_Tuple2', _0: _p23._0 + 50, _1: _p23._1 + 50};
				},
				A2(
					_elm_lang$core$List$map,
					_elm_lang$core$Basics$fromPolar,
					A2(
						_elm_lang$core$List$map,
						function (_p24) {
							var _p25 = _p24;
							return {ctor: '_Tuple2', _0: _p25._0, _1: _p25._1 + (_elm_lang$core$Basics$pi / 6)};
						},
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: radius, _1: 0},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: radius, _1: _elm_lang$core$Basics$pi / 3},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: radius, _1: (2 * _elm_lang$core$Basics$pi) / 3},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: radius, _1: _elm_lang$core$Basics$pi},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: radius, _1: (4 * _elm_lang$core$Basics$pi) / 3},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: radius, _1: (5 * _elm_lang$core$Basics$pi) / 3},
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}))));
		return {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$polygon,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill(
						_user$project$View$playerColor(_p19.playerId)),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$points(points),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$polygon,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill(
							A2(
								_elm_lang$core$Basics_ops['++'],
								'url(#piece',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(_p19.value),
									')'))),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$stroke('black'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$strokeWidth('2px'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$points(points),
									_1: {ctor: '[]'}
								}
							}
						}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			}
		};
	});
var _user$project$View$selectedSvg = function (model) {
	var piece = A2(
		_elm_lang$core$Maybe$andThen,
		function (_) {
			return _.choice;
		},
		A2(
			_elm_lang$core$Maybe$andThen,
			function (k) {
				return A2(_elm_lang$core$Dict$get, k, model.players);
			},
			model.currentPlayer));
	var _p26 = piece;
	if (_p26.ctor === 'Nothing') {
		return A2(
			_elm_lang$html$Html$span,
			{ctor: '[]'},
			{ctor: '[]'});
	} else {
		var _p28 = _p26._0;
		var _p27 = model.position;
		if (_p27.ctor === 'Playing') {
			return A2(
				_elm_lang$html$Html$div,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'width', _1: '100px'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'height', _1: '100px'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'margin', _1: 'auto'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'border-style', _1: 'solid'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'border-color', _1: 'black'},
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$svg$Svg$svg,
								{
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$width('100'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$height('100'),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 100 100'),
											_1: {ctor: '[]'}
										}
									}
								},
								A2(_user$project$View$selectedHexaSvg, 35, _p28)),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$br,
							{ctor: '[]'},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: _user$project$View$winLose(_p28),
							_1: {ctor: '[]'}
						}
					}
				});
		} else {
			return A2(
				_elm_lang$html$Html$span,
				{ctor: '[]'},
				{ctor: '[]'});
		}
	}
};
var _user$project$View$deckHexaSvg = F4(
	function (x, y, radius, _p29) {
		var _p30 = _p29;
		var _p38 = _p30.value;
		var _p37 = _p30.playerId;
		var points = A3(
			_elm_lang$core$List$foldr,
			F2(
				function (_p31, acc) {
					var _p32 = _p31;
					return A2(
						_elm_lang$core$Basics_ops['++'],
						acc,
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(_p32._0),
							A2(
								_elm_lang$core$Basics_ops['++'],
								', ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(_p32._1),
									' '))));
				}),
			'',
			A2(
				_elm_lang$core$List$map,
				function (_p33) {
					var _p34 = _p33;
					return {ctor: '_Tuple2', _0: _p34._0 + x, _1: _p34._1 + y};
				},
				A2(
					_elm_lang$core$List$map,
					_elm_lang$core$Basics$fromPolar,
					A2(
						_elm_lang$core$List$map,
						function (_p35) {
							var _p36 = _p35;
							return {ctor: '_Tuple2', _0: _p36._0, _1: _p36._1 + (_elm_lang$core$Basics$pi / 6)};
						},
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: radius, _1: 0},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: radius, _1: _elm_lang$core$Basics$pi / 3},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: radius, _1: (2 * _elm_lang$core$Basics$pi) / 3},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: radius, _1: _elm_lang$core$Basics$pi},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: radius, _1: (4 * _elm_lang$core$Basics$pi) / 3},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: radius, _1: (5 * _elm_lang$core$Basics$pi) / 3},
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}))));
		return {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$polygon,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill(
						_user$project$View$playerColor(_p37)),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$points(points),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$polygon,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill(
							A2(
								_elm_lang$core$Basics_ops['++'],
								'url(#piece',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(_p38),
									')'))),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$stroke('black'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$strokeWidth('2px'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$points(points),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Events$onClick(
											_user$project$Types$PickUpPiece(
												A2(_user$project$Types$Piece, _p38, _p37))),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$cursor('pointer'),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$text_,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$x(
								_elm_lang$core$Basics$toString(x - (radius / 1.5))),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$y(
									_elm_lang$core$Basics$toString(y)),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$stroke('black'),
									_1: {ctor: '[]'}
								}
							}
						},
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg$text(
								_elm_lang$core$Basics$toString(_p38)),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			}
		};
	});
var _user$project$View$deckSvg = function (model) {
	var _p39 = A2(
		_elm_lang$core$Maybe$andThen,
		function (id) {
			return A2(_elm_lang$core$Dict$get, id, model.players);
		},
		model.currentPlayer);
	if (_p39.ctor === 'Nothing') {
		return A2(
			_elm_lang$html$Html$span,
			{ctor: '[]'},
			{ctor: '[]'});
	} else {
		var _p42 = _p39._0.deck;
		var def = A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			_user$project$View$piecesPatterns);
		var l = 35;
		var sizeY = 75;
		var sizeX = 1000;
		var nbrPieces = _elm_lang$core$List$length(_p42);
		var offset = sizeX / _elm_lang$core$Basics$toFloat(nbrPieces);
		var coords = A2(
			_elm_lang$core$List$map,
			function (n) {
				return {
					ctor: '_Tuple2',
					_0: (_elm_lang$core$Basics$toFloat(n) * offset) + l,
					_1: sizeY / 2
				};
			},
			A2(_elm_lang$core$List$range, 0, nbrPieces - 1));
		var pieces = A2(
			_elm_lang$core$List$concatMap,
			function (_p40) {
				var _p41 = _p40;
				return A4(_user$project$View$deckHexaSvg, _p41._0._0, _p41._0._1, l, _p41._1);
			},
			A3(
				_elm_lang$core$List$map2,
				F2(
					function (v0, v1) {
						return {ctor: '_Tuple2', _0: v0, _1: v1};
					}),
				coords,
				_p42));
		return A2(
			_elm_lang$svg$Svg$svg,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$width('750'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$viewBox(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'0 0 ',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(sizeX),
								A2(
									_elm_lang$core$Basics_ops['++'],
									' ',
									_elm_lang$core$Basics$toString(sizeY))))),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '::', _0: def, _1: pieces});
	}
};
var _user$project$View$hexaSvg = F6(
	function (x, y, state, l, u, v) {
		var offset = function (_p43) {
			var _p44 = _p43;
			return l - _p44._1;
		}(
			_elm_lang$core$Basics$fromPolar(
				{ctor: '_Tuple2', _0: l, _1: _elm_lang$core$Basics$pi / 3}));
		var radius = l + offset;
		var points = A3(
			_elm_lang$core$List$foldr,
			F2(
				function (_p45, acc) {
					var _p46 = _p45;
					return A2(
						_elm_lang$core$Basics_ops['++'],
						acc,
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(_p46._0),
							A2(
								_elm_lang$core$Basics_ops['++'],
								', ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(_p46._1),
									' '))));
				}),
			'',
			A2(
				_elm_lang$core$List$map,
				function (_p47) {
					var _p48 = _p47;
					return {ctor: '_Tuple2', _0: _p48._0 + x, _1: _p48._1 + y};
				},
				A2(
					_elm_lang$core$List$map,
					_elm_lang$core$Basics$fromPolar,
					A2(
						_elm_lang$core$List$map,
						function (_p49) {
							var _p50 = _p49;
							return {ctor: '_Tuple2', _0: _p50._0, _1: _p50._1 + (_elm_lang$core$Basics$pi / 6)};
						},
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: radius, _1: 0},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: radius, _1: _elm_lang$core$Basics$pi / 3},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: radius, _1: (2 * _elm_lang$core$Basics$pi) / 3},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: radius, _1: _elm_lang$core$Basics$pi},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: radius, _1: (4 * _elm_lang$core$Basics$pi) / 3},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: radius, _1: (5 * _elm_lang$core$Basics$pi) / 3},
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}))));
		return A2(
			_elm_lang$core$Basics_ops['++'],
			function () {
				var _p51 = state;
				if (_p51.ctor === 'Contain') {
					return {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$polygon,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill(
									_user$project$View$playerColor(_p51._0.playerId)),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$points(points),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					};
				} else {
					return {ctor: '[]'};
				}
			}(),
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$polygon,
					{
						ctor: '::',
						_0: function () {
							var _p52 = state;
							switch (_p52.ctor) {
								case 'Empty':
									return _elm_lang$svg$Svg_Attributes$fill('white');
								case 'UnPlayable':
									if (_p52._0.ctor === 'Grey') {
										return _elm_lang$svg$Svg_Attributes$fill('grey');
									} else {
										return _elm_lang$svg$Svg_Attributes$fill(_p52._0._0);
									}
								default:
									return _elm_lang$svg$Svg_Attributes$fill(
										A2(
											_elm_lang$core$Basics_ops['++'],
											'url(#piece',
											A2(
												_elm_lang$core$Basics_ops['++'],
												_elm_lang$core$Basics$toString(_p52._0.value),
												')')));
							}
						}(),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$stroke('black'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$strokeWidth('2px'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$points(points),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Events$onClick(
											_user$project$Types$PutDownPiece(
												{
													ctor: '_Tuple2',
													_0: _elm_lang$core$Basics$round(u),
													_1: _elm_lang$core$Basics$round(v)
												})),
										_1: {
											ctor: '::',
											_0: function () {
												var _p53 = state;
												if (_p53.ctor === 'Empty') {
													return _elm_lang$svg$Svg_Attributes$cursor('pointer');
												} else {
													return _elm_lang$svg$Svg_Attributes$cursor('default');
												}
											}(),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$text_,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$x(
								_elm_lang$core$Basics$toString(x - (l / 1.5))),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$y(
									_elm_lang$core$Basics$toString(y)),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$stroke('black'),
									_1: {ctor: '[]'}
								}
							}
						},
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg$text(
								A2(
									_elm_lang$core$Basics_ops['++'],
									'(',
									A2(
										_elm_lang$core$Basics_ops['++'],
										_elm_lang$core$Basics$toString(u),
										A2(
											_elm_lang$core$Basics_ops['++'],
											', ',
											A2(
												_elm_lang$core$Basics_ops['++'],
												_elm_lang$core$Basics$toString(v),
												')'))))),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			});
	});
var _user$project$View$hexaBoardSvg = F3(
	function (n, l, board) {
		var def = A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			_user$project$View$piecesPatterns);
		var size = _elm_lang$core$Basics$toString(((l * 4) * n) + (2 * l));
		var yOffset = F2(
			function (x, y) {
				return function (_p54) {
					var _p55 = _p54;
					return l - _p55._1;
				}(
					_elm_lang$core$Basics$fromPolar(
						{ctor: '_Tuple2', _0: l, _1: _elm_lang$core$Basics$pi / 3}));
			});
		var offset = function (v) {
			return (_elm_lang$core$Native_Utils.cmp(
				v,
				_elm_lang$core$Basics$toFloat(n) + 1) > -1) ? (v - n) : (n - v);
		};
		var adjust = function (v) {
			return _elm_lang$core$Native_Utils.eq(
				A2(
					_elm_lang$core$Basics_ops['%'],
					_elm_lang$core$Basics$round(v),
					2),
				0) ? 0 : 0;
		};
		var coords = A2(
			_elm_lang$core$List$map,
			function (_p56) {
				var _p57 = _p56;
				return {
					ctor: '_Tuple3',
					_0: _elm_lang$core$Basics$toFloat(_p57._0),
					_1: _elm_lang$core$Basics$toFloat(_p57._1),
					_2: _p57._2
				};
			},
			A2(
				_elm_lang$core$List$map,
				function (_p58) {
					var _p59 = _p58;
					return {ctor: '_Tuple3', _0: _p59.xPos, _1: _p59.yPos, _2: _p59.state};
				},
				_elm_lang$core$Dict$values(board)));
		var cells = A2(
			_elm_lang$core$List$concatMap,
			function (_p60) {
				var _p61 = _p60;
				var _p63 = _p61._1;
				var _p62 = _p61._0;
				return A6(
					_user$project$View$hexaSvg,
					(l + ((_p62 * l) * 2)) + (offset(_p63) * l),
					(((_p63 * 2) * l) + (2 * l)) - ((_p63 * 2) * A2(yOffset, _p62, _p63)),
					_p61._2,
					l,
					_p62,
					_p63);
			},
			coords);
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'margin', _1: 'auto'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'width', _1: '50%'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'max-width', _1: '700px'},
										_1: {ctor: '[]'}
									}
								}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$svg,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$width('100%'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$height('100%'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$viewBox(
											A2(
												_elm_lang$core$Basics_ops['++'],
												'0 0 ',
												A2(
													_elm_lang$core$Basics_ops['++'],
													size,
													A2(_elm_lang$core$Basics_ops['++'], ' ', size)))),
										_1: {ctor: '[]'}
									}
								}
							},
							{ctor: '::', _0: def, _1: cells}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			});
	});
var _user$project$View$endGameView = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{ctor: '[]'});
};
var _user$project$View$boardView = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A3(_user$project$View$hexaBoardSvg, model.boardSize, 35, model.board),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$br,
					{ctor: '[]'},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: _user$project$View$scores(model),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'margin', _1: 'auto'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'width', _1: '750px'},
											_1: {ctor: '[]'}
										}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'padding-bottom', _1: '0.75em'},
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text(
											A2(
												_elm_lang$core$Basics_ops['++'],
												'player ',
												A2(
													_elm_lang$core$Maybe$withDefault,
													'Error',
													A2(
														_elm_lang$core$Maybe$andThen,
														function (_p64) {
															return _elm_lang$core$Maybe$Just(
																_elm_lang$core$Basics$toString(_p64));
														},
														model.currentPlayer)))),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: _user$project$View$deckSvg(model),
									_1: {ctor: '[]'}
								}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'padding-top', _1: '0.75em'},
												_1: {ctor: '[]'}
											}
										}),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _user$project$View$selectedSvg(model),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		});
};
var _user$project$View$turnSelectionView = function (model) {
	var turn = function (n) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Events$onClick(
					_user$project$Types$SelectTurn(n)),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'padding', _1: '1em'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'cursor', _1: 'pointer'},
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'turn ',
						_elm_lang$core$Basics$toString(n))),
				_1: {ctor: '[]'}
			});
	};
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'Current player: ',
						A2(
							_elm_lang$core$Maybe$withDefault,
							'error',
							A2(
								_elm_lang$core$Maybe$map,
								function (_p65) {
									return _elm_lang$core$Basics$toString(
										function (_) {
											return _.id;
										}(_p65));
								},
								A2(
									_elm_lang$core$Maybe$andThen,
									function (id) {
										return A2(_elm_lang$core$Dict$get, id, model.players);
									},
									model.currentPlayer))))),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$br,
						{ctor: '[]'},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							A2(
								_elm_lang$core$Basics_ops['++'],
								'Current player score: ',
								_elm_lang$core$Basics$toString(
									A2(
										_elm_lang$core$Maybe$withDefault,
										'error',
										A2(
											_elm_lang$core$Maybe$map,
											function (_p66) {
												return _elm_lang$core$Basics$toString(
													function (_) {
														return _.score;
													}(_p66));
											},
											A2(
												_elm_lang$core$Maybe$andThen,
												function (id) {
													return A2(_elm_lang$core$Dict$get, id, model.players);
												},
												model.currentPlayer)))))),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$br,
								{ctor: '[]'},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}
					}
				}
			},
			A3(
				_elm_lang$core$Set$foldr,
				F2(
					function (n, acc) {
						return {
							ctor: '::',
							_0: turn(n),
							_1: acc
						};
					}),
				{ctor: '[]'},
				model.availableTurns)));
};
var _user$project$View$configView = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$label,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$for('nbrPLayerInput'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('How many players?'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$br,
					{ctor: '[]'},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$input,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$id('nbrPLayerInput'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onInput(_user$project$Types$SetPlayerNumber),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$br,
							{ctor: '[]'},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$button,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onClick(_user$project$Types$InitializePlayers),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Go'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		});
};
var _user$project$View$view = function (model) {
	var _p67 = model.position;
	switch (_p67.ctor) {
		case 'Config':
			return _user$project$View$configView(model);
		case 'PieceSelection':
			return _user$project$View$boardView(model);
		case 'TurnSelection':
			return _user$project$View$turnSelectionView(model);
		case 'Playing':
			return _user$project$View$boardView(model);
		default:
			return _user$project$View$endGameView(model);
	}
};
