var _user$project$View$playerColor = function (playerId) {
	return _elm_lang$core$Native_Utils.eq(playerId, 1) ? '#f0f9e8' : (_elm_lang$core$Native_Utils.eq(playerId, 2) ? '#ccebc5' : (_elm_lang$core$Native_Utils.eq(playerId, 3) ? '#a8ddb5' : (_elm_lang$core$Native_Utils.eq(playerId, 4) ? '#7bccc4' : (_elm_lang$core$Native_Utils.eq(playerId, 5) ? '#43a2ca' : (_elm_lang$core$Native_Utils.eq(playerId, 6) ? '#0868ac' : 'white')))));
};
var _user$project$View$piecesPatterns = A2(
	_elm_lang$core$List$map,
	function (n) {
		return A2(
			_elm_lang$svg$Svg$pattern,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$id(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'piece',
						_elm_lang$core$Basics$toString(n))),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$x('0%'),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$y('0%'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$width('100%'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$height('100%'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 100 100'),
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$image,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$x('10'),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$y('10'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$height('80'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$width('80'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$xlinkHref(
											A2(
												_elm_lang$core$Basics_ops['++'],
												'images/pieces/piece',
												A2(
													_elm_lang$core$Basics_ops['++'],
													_elm_lang$core$Basics$toString(n),
													'.png'))),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			});
	},
	A2(_elm_lang$core$List$range, 0, 14));
var _user$project$View$pieceSvg = function (_p0) {
	var _p1 = _p0;
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'value: ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(_p1.value),
						A2(
							_elm_lang$core$Basics_ops['++'],
							'playerId: ',
							_elm_lang$core$Basics$toString(_p1.playerId))))),
			_1: {ctor: '[]'}
		});
};
var _user$project$View$selectedHexaSvg = F2(
	function (radius, _p2) {
		var _p3 = _p2;
		var points = A3(
			_elm_lang$core$List$foldr,
			F2(
				function (_p4, acc) {
					var _p5 = _p4;
					return A2(
						_elm_lang$core$Basics_ops['++'],
						acc,
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(_p5._0),
							A2(
								_elm_lang$core$Basics_ops['++'],
								', ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(_p5._1),
									' '))));
				}),
			'',
			A2(
				_elm_lang$core$List$map,
				function (_p6) {
					var _p7 = _p6;
					return {ctor: '_Tuple2', _0: _p7._0 + 50, _1: _p7._1 + 50};
				},
				A2(
					_elm_lang$core$List$map,
					_elm_lang$core$Basics$fromPolar,
					A2(
						_elm_lang$core$List$map,
						function (_p8) {
							var _p9 = _p8;
							return {ctor: '_Tuple2', _0: _p9._0, _1: _p9._1 + (_elm_lang$core$Basics$pi / 6)};
						},
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: radius, _1: 0},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: radius, _1: _elm_lang$core$Basics$pi / 3},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: radius, _1: (2 * _elm_lang$core$Basics$pi) / 3},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: radius, _1: _elm_lang$core$Basics$pi},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: radius, _1: (4 * _elm_lang$core$Basics$pi) / 3},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: radius, _1: (5 * _elm_lang$core$Basics$pi) / 3},
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}))));
		return {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$polygon,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill(
						_user$project$View$playerColor(_p3.playerId)),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$points(points),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$polygon,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill(
							A2(
								_elm_lang$core$Basics_ops['++'],
								'url(#piece',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(_p3.value),
									')'))),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$stroke('black'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$strokeWidth('2px'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$points(points),
									_1: {ctor: '[]'}
								}
							}
						}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			}
		};
	});
var _user$project$View$selectedSvg = function (model) {
	var piece = A2(
		_elm_lang$core$Maybe$andThen,
		function (_) {
			return _.choice;
		},
		A2(
			_elm_lang$core$Maybe$andThen,
			function (k) {
				return A2(_elm_lang$core$Dict$get, k, model.players);
			},
			model.currentPlayer));
	var _p10 = piece;
	if (_p10.ctor === 'Nothing') {
		return A2(
			_elm_lang$html$Html$span,
			{ctor: '[]'},
			{ctor: '[]'});
	} else {
		var _p11 = model.position;
		if (_p11.ctor === 'Playing') {
			return A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'width', _1: '100px'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'height', _1: '100px'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin', _1: 'auto'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'border-style', _1: 'solid'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'border-color', _1: 'black'},
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: A2(
						_elm_lang$svg$Svg$svg,
						{
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$width('100'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$height('100'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$viewBox('0 0 100 100'),
									_1: {ctor: '[]'}
								}
							}
						},
						A2(_user$project$View$selectedHexaSvg, 35, _p10._0)),
					_1: {ctor: '[]'}
				});
		} else {
			return A2(
				_elm_lang$html$Html$span,
				{ctor: '[]'},
				{ctor: '[]'});
		}
	}
};
var _user$project$View$deckHexaSvg = F4(
	function (x, y, radius, _p12) {
		var _p13 = _p12;
		var _p21 = _p13.value;
		var _p20 = _p13.playerId;
		var points = A3(
			_elm_lang$core$List$foldr,
			F2(
				function (_p14, acc) {
					var _p15 = _p14;
					return A2(
						_elm_lang$core$Basics_ops['++'],
						acc,
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(_p15._0),
							A2(
								_elm_lang$core$Basics_ops['++'],
								', ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(_p15._1),
									' '))));
				}),
			'',
			A2(
				_elm_lang$core$List$map,
				function (_p16) {
					var _p17 = _p16;
					return {ctor: '_Tuple2', _0: _p17._0 + x, _1: _p17._1 + y};
				},
				A2(
					_elm_lang$core$List$map,
					_elm_lang$core$Basics$fromPolar,
					A2(
						_elm_lang$core$List$map,
						function (_p18) {
							var _p19 = _p18;
							return {ctor: '_Tuple2', _0: _p19._0, _1: _p19._1 + (_elm_lang$core$Basics$pi / 6)};
						},
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: radius, _1: 0},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: radius, _1: _elm_lang$core$Basics$pi / 3},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: radius, _1: (2 * _elm_lang$core$Basics$pi) / 3},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: radius, _1: _elm_lang$core$Basics$pi},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: radius, _1: (4 * _elm_lang$core$Basics$pi) / 3},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: radius, _1: (5 * _elm_lang$core$Basics$pi) / 3},
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}))));
		return {
			ctor: '::',
			_0: A2(
				_elm_lang$svg$Svg$polygon,
				{
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$fill(
						_user$project$View$playerColor(_p20)),
					_1: {
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$points(points),
						_1: {ctor: '[]'}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$polygon,
					{
						ctor: '::',
						_0: _elm_lang$svg$Svg_Attributes$fill(
							A2(
								_elm_lang$core$Basics_ops['++'],
								'url(#piece',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(_p21),
									')'))),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$stroke('black'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$strokeWidth('2px'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$points(points),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Events$onClick(
											_user$project$Types$PickUpPiece(
												A2(_user$project$Types$Piece, _p21, _p20))),
										_1: {
											ctor: '::',
											_0: _elm_lang$svg$Svg_Attributes$cursor('pointer'),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			}
		};
	});
var _user$project$View$deckSvg = function (model) {
	var _p22 = A2(
		_elm_lang$core$Maybe$andThen,
		function (id) {
			return A2(_elm_lang$core$Dict$get, id, model.players);
		},
		model.currentPlayer);
	if (_p22.ctor === 'Nothing') {
		return A2(
			_elm_lang$html$Html$span,
			{ctor: '[]'},
			{ctor: '[]'});
	} else {
		var _p25 = _p22._0.deck;
		var def = A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			_user$project$View$piecesPatterns);
		var l = 35;
		var sizeY = 75;
		var sizeX = 1000;
		var nbrPieces = _elm_lang$core$List$length(_p25);
		var offset = sizeX / _elm_lang$core$Basics$toFloat(nbrPieces);
		var coords = A2(
			_elm_lang$core$List$map,
			function (n) {
				return {
					ctor: '_Tuple2',
					_0: (_elm_lang$core$Basics$toFloat(n) * offset) + l,
					_1: sizeY / 2
				};
			},
			A2(_elm_lang$core$List$range, 0, nbrPieces - 1));
		var pieces = A2(
			_elm_lang$core$List$concatMap,
			function (_p23) {
				var _p24 = _p23;
				return A4(_user$project$View$deckHexaSvg, _p24._0._0, _p24._0._1, l, _p24._1);
			},
			A3(
				_elm_lang$core$List$map2,
				F2(
					function (v0, v1) {
						return {ctor: '_Tuple2', _0: v0, _1: v1};
					}),
				coords,
				_p25));
		return A2(
			_elm_lang$svg$Svg$svg,
			{
				ctor: '::',
				_0: _elm_lang$svg$Svg_Attributes$width('750'),
				_1: {
					ctor: '::',
					_0: _elm_lang$svg$Svg_Attributes$viewBox(
						A2(
							_elm_lang$core$Basics_ops['++'],
							'0 0 ',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(sizeX),
								A2(
									_elm_lang$core$Basics_ops['++'],
									' ',
									_elm_lang$core$Basics$toString(sizeY))))),
					_1: {ctor: '[]'}
				}
			},
			{ctor: '::', _0: def, _1: pieces});
	}
};
var _user$project$View$hexaSvg = F6(
	function (x, y, state, l, u, v) {
		var offset = function (_p26) {
			var _p27 = _p26;
			return l - _p27._1;
		}(
			_elm_lang$core$Basics$fromPolar(
				{ctor: '_Tuple2', _0: l, _1: _elm_lang$core$Basics$pi / 3}));
		var radius = l + offset;
		var points = A3(
			_elm_lang$core$List$foldr,
			F2(
				function (_p28, acc) {
					var _p29 = _p28;
					return A2(
						_elm_lang$core$Basics_ops['++'],
						acc,
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(_p29._0),
							A2(
								_elm_lang$core$Basics_ops['++'],
								', ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(_p29._1),
									' '))));
				}),
			'',
			A2(
				_elm_lang$core$List$map,
				function (_p30) {
					var _p31 = _p30;
					return {ctor: '_Tuple2', _0: _p31._0 + x, _1: _p31._1 + y};
				},
				A2(
					_elm_lang$core$List$map,
					_elm_lang$core$Basics$fromPolar,
					A2(
						_elm_lang$core$List$map,
						function (_p32) {
							var _p33 = _p32;
							return {ctor: '_Tuple2', _0: _p33._0, _1: _p33._1 + (_elm_lang$core$Basics$pi / 6)};
						},
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: radius, _1: 0},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: radius, _1: _elm_lang$core$Basics$pi / 3},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: radius, _1: (2 * _elm_lang$core$Basics$pi) / 3},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: radius, _1: _elm_lang$core$Basics$pi},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: radius, _1: (4 * _elm_lang$core$Basics$pi) / 3},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: radius, _1: (5 * _elm_lang$core$Basics$pi) / 3},
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}))));
		return A2(
			_elm_lang$core$Basics_ops['++'],
			function () {
				var _p34 = state;
				if (_p34.ctor === 'Contain') {
					return {
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$polygon,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$fill(
									_user$project$View$playerColor(_p34._0.playerId)),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$points(points),
									_1: {ctor: '[]'}
								}
							},
							{ctor: '[]'}),
						_1: {ctor: '[]'}
					};
				} else {
					return {ctor: '[]'};
				}
			}(),
			{
				ctor: '::',
				_0: A2(
					_elm_lang$svg$Svg$polygon,
					{
						ctor: '::',
						_0: function () {
							var _p35 = state;
							switch (_p35.ctor) {
								case 'Empty':
									return _elm_lang$svg$Svg_Attributes$fill('white');
								case 'UnPlayable':
									if (_p35._0.ctor === 'Grey') {
										return _elm_lang$svg$Svg_Attributes$fill('grey');
									} else {
										return _elm_lang$svg$Svg_Attributes$fill(_p35._0._0);
									}
								default:
									return _elm_lang$svg$Svg_Attributes$fill(
										A2(
											_elm_lang$core$Basics_ops['++'],
											'url(#piece',
											A2(
												_elm_lang$core$Basics_ops['++'],
												_elm_lang$core$Basics$toString(_p35._0.value),
												')')));
							}
						}(),
						_1: {
							ctor: '::',
							_0: _elm_lang$svg$Svg_Attributes$stroke('black'),
							_1: {
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$strokeWidth('2px'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$points(points),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Events$onClick(
											_user$project$Types$PutDownPiece(
												{
													ctor: '_Tuple2',
													_0: _elm_lang$core$Basics$round(u),
													_1: _elm_lang$core$Basics$round(v)
												})),
										_1: {
											ctor: '::',
											_0: function () {
												var _p36 = state;
												if (_p36.ctor === 'Empty') {
													return _elm_lang$svg$Svg_Attributes$cursor('pointer');
												} else {
													return _elm_lang$svg$Svg_Attributes$cursor('default');
												}
											}(),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					},
					{ctor: '[]'}),
				_1: {ctor: '[]'}
			});
	});
var _user$project$View$hexaBoardSvg = F3(
	function (n, l, board) {
		var def = A2(
			_elm_lang$svg$Svg$defs,
			{ctor: '[]'},
			_user$project$View$piecesPatterns);
		var size = _elm_lang$core$Basics$toString(((l * 4) * n) + (2 * l));
		var yOffset = F2(
			function (x, y) {
				return function (_p37) {
					var _p38 = _p37;
					return l - _p38._1;
				}(
					_elm_lang$core$Basics$fromPolar(
						{ctor: '_Tuple2', _0: l, _1: _elm_lang$core$Basics$pi / 3}));
			});
		var offset = function (v) {
			return (_elm_lang$core$Native_Utils.cmp(
				v,
				_elm_lang$core$Basics$toFloat(n) + 1) > -1) ? (v - n) : (n - v);
		};
		var adjust = function (v) {
			return _elm_lang$core$Native_Utils.eq(
				A2(
					_elm_lang$core$Basics_ops['%'],
					_elm_lang$core$Basics$round(v),
					2),
				0) ? 0 : 0;
		};
		var coords = A2(
			_elm_lang$core$List$map,
			function (_p39) {
				var _p40 = _p39;
				return {
					ctor: '_Tuple3',
					_0: _elm_lang$core$Basics$toFloat(_p40._0),
					_1: _elm_lang$core$Basics$toFloat(_p40._1),
					_2: _p40._2
				};
			},
			A2(
				_elm_lang$core$List$map,
				function (_p41) {
					var _p42 = _p41;
					return {ctor: '_Tuple3', _0: _p42.xPos, _1: _p42.yPos, _2: _p42.state};
				},
				_elm_lang$core$Dict$values(board)));
		var cells = A2(
			_elm_lang$core$List$concatMap,
			function (_p43) {
				var _p44 = _p43;
				var _p46 = _p44._1;
				var _p45 = _p44._0;
				return A6(
					_user$project$View$hexaSvg,
					(l + ((_p45 * l) * 2)) + (offset(_p46) * l),
					(((_p46 * 2) * l) + (2 * l)) - ((_p46 * 2) * A2(yOffset, _p45, _p46)),
					_p44._2,
					l,
					_p45,
					_p46);
			},
			coords);
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'margin', _1: 'auto'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'width', _1: '50%'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'max-width', _1: '700px'},
										_1: {ctor: '[]'}
									}
								}
							}),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$svg$Svg$svg,
							{
								ctor: '::',
								_0: _elm_lang$svg$Svg_Attributes$width('100%'),
								_1: {
									ctor: '::',
									_0: _elm_lang$svg$Svg_Attributes$height('100%'),
									_1: {
										ctor: '::',
										_0: _elm_lang$svg$Svg_Attributes$viewBox(
											A2(
												_elm_lang$core$Basics_ops['++'],
												'0 0 ',
												A2(
													_elm_lang$core$Basics_ops['++'],
													size,
													A2(_elm_lang$core$Basics_ops['++'], ' ', size)))),
										_1: {ctor: '[]'}
									}
								}
							},
							{ctor: '::', _0: def, _1: cells}),
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			});
	});
var _user$project$View$endGameView = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{ctor: '[]'});
};
var _user$project$View$boardView = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A3(_user$project$View$hexaBoardSvg, model.boardSize, 35, model.board),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$br,
					{ctor: '[]'},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin', _1: 'auto'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'width', _1: '750px'},
										_1: {ctor: '[]'}
									}
								}),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'padding-bottom', _1: '0.75em'},
											_1: {ctor: '[]'}
										}),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										A2(
											_elm_lang$core$Basics_ops['++'],
											'player ',
											A2(
												_elm_lang$core$Maybe$withDefault,
												'Error',
												A2(
													_elm_lang$core$Maybe$andThen,
													function (_p47) {
														return _elm_lang$core$Maybe$Just(
															_elm_lang$core$Basics$toString(_p47));
													},
													model.currentPlayer)))),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: _user$project$View$deckSvg(model),
								_1: {ctor: '[]'}
							}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$style(
									{
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'width', _1: '100%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'padding-top', _1: '0.75em'},
											_1: {ctor: '[]'}
										}
									}),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _user$project$View$selectedSvg(model),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _user$project$View$turnSelectionView = function (model) {
	var turn = function (n) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Events$onClick(
					_user$project$Types$SelectTurn(n)),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'padding', _1: '1em'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'cursor', _1: 'pointer'},
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'turn ',
						_elm_lang$core$Basics$toString(n))),
				_1: {ctor: '[]'}
			});
	};
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		A2(
			_elm_lang$core$Basics_ops['++'],
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'Current player: ',
						A2(
							_elm_lang$core$Maybe$withDefault,
							'error',
							A2(
								_elm_lang$core$Maybe$map,
								function (_p48) {
									return _elm_lang$core$Basics$toString(
										function (_) {
											return _.id;
										}(_p48));
								},
								A2(
									_elm_lang$core$Maybe$andThen,
									function (id) {
										return A2(_elm_lang$core$Dict$get, id, model.players);
									},
									model.currentPlayer))))),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$br,
						{ctor: '[]'},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html$text(
							A2(
								_elm_lang$core$Basics_ops['++'],
								'Current player score: ',
								_elm_lang$core$Basics$toString(
									A2(
										_elm_lang$core$Maybe$withDefault,
										'error',
										A2(
											_elm_lang$core$Maybe$map,
											function (_p49) {
												return _elm_lang$core$Basics$toString(
													function (_) {
														return _.score;
													}(_p49));
											},
											A2(
												_elm_lang$core$Maybe$andThen,
												function (id) {
													return A2(_elm_lang$core$Dict$get, id, model.players);
												},
												model.currentPlayer)))))),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$br,
								{ctor: '[]'},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}
					}
				}
			},
			A3(
				_elm_lang$core$Set$foldr,
				F2(
					function (n, acc) {
						return {
							ctor: '::',
							_0: turn(n),
							_1: acc
						};
					}),
				{ctor: '[]'},
				model.availableTurns)));
};
var _user$project$View$configView = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$label,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$for('nbrPLayerInput'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('How many players?'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$br,
					{ctor: '[]'},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$input,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$id('nbrPLayerInput'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onInput(_user$project$Types$SetPlayerNumber),
								_1: {ctor: '[]'}
							}
						},
						{ctor: '[]'}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$br,
							{ctor: '[]'},
							{ctor: '[]'}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$button,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onClick(_user$project$Types$InitializePlayers),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Go'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		});
};
var _user$project$View$view = function (model) {
	var _p50 = model.position;
	switch (_p50.ctor) {
		case 'Config':
			return _user$project$View$configView(model);
		case 'PieceSelection':
			return _user$project$View$boardView(model);
		case 'TurnSelection':
			return _user$project$View$turnSelectionView(model);
		case 'Playing':
			return _user$project$View$boardView(model);
		default:
			return _user$project$View$endGameView(model);
	}
};
