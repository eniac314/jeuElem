var _user$project$Main$color = function (n) {
	var blue = (_elm_lang$core$Basics$sin(((4 * _elm_lang$core$Basics$pi) * n) / 3) * 127) + 128;
	var green = (_elm_lang$core$Basics$sin(((2 * _elm_lang$core$Basics$pi) * n) / 3) * 127) + 128;
	var red = (_elm_lang$core$Basics$sin(n) * 127) + 128;
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'rgb(',
		A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(
				_elm_lang$core$Basics$round(red)),
			A2(
				_elm_lang$core$Basics_ops['++'],
				', ',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(
						_elm_lang$core$Basics$round(green)),
					A2(
						_elm_lang$core$Basics_ops['++'],
						', ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(
								_elm_lang$core$Basics$round(blue)),
							')'))))));
};
var _user$project$Main$goAround = function (n) {
	var range_ = F2(
		function (a, b) {
			return _elm_lang$core$List$reverse(
				A2(_elm_lang$core$List$range, b, a));
		});
	var xs = A2(
		_elm_lang$core$Basics_ops['++'],
		A2(_elm_lang$core$List$range, 0, 2 * n),
		A2(
			_elm_lang$core$Basics_ops['++'],
			A2(range_, (2 * n) - 1, 0),
			A2(_elm_lang$core$List$repeat, (2 * n) - 1, 0)));
	var ys = A2(
		_elm_lang$core$Basics_ops['++'],
		A2(_elm_lang$core$List$repeat, n, 0),
		A2(
			_elm_lang$core$Basics_ops['++'],
			A2(_elm_lang$core$List$range, 0, 2 * n),
			A2(
				_elm_lang$core$Basics_ops['++'],
				A2(_elm_lang$core$List$repeat, n, 2 * n),
				A2(range_, (2 * n) - 1, 1))));
	return A3(
		_elm_lang$core$List$map2,
		F2(
			function (v0, v1) {
				return {ctor: '_Tuple2', _0: v0, _1: v1};
			}),
		xs,
		ys);
};
var _user$project$Main$rainbowEdge = F2(
	function (n, board) {
		var cells = _user$project$Main$goAround(n);
		var offset = (2 * _elm_lang$core$Basics$pi) / (_elm_lang$core$Basics$toFloat(n) * 6);
		return _elm_lang$core$Tuple$second(
			A3(
				_elm_lang$core$List$foldr,
				F2(
					function (cell, _p0) {
						var _p1 = _p0;
						var _p5 = _p1._0;
						return {
							ctor: '_Tuple2',
							_0: _p5 + offset,
							_1: A3(
								_elm_lang$core$Dict$update,
								cell,
								function (v) {
									var _p2 = v;
									if (_p2.ctor === 'Nothing') {
										return _elm_lang$core$Maybe$Nothing;
									} else {
										var _p4 = _p2._0;
										var _p3 = _p4.state;
										if (_p3.ctor === 'UnPlayable') {
											return _elm_lang$core$Maybe$Just(
												_elm_lang$core$Native_Utils.update(
													_p4,
													{
														state: _user$project$Types$UnPlayable(
															_user$project$Types$Rainbow(
																_user$project$Main$color(0.4 * _p5)))
													}));
										} else {
											return _elm_lang$core$Maybe$Just(_p4);
										}
									}
								},
								_p1._1)
						};
					}),
				{ctor: '_Tuple2', _0: 0, _1: board},
				cells));
	});
var _user$project$Main$isEdge = F2(
	function (n, _p6) {
		var _p7 = _p6;
		var _p9 = _p7.yPos;
		var _p8 = _p7.xPos;
		return _elm_lang$core$Native_Utils.eq(_p8, 0) || (_elm_lang$core$Native_Utils.eq(_p9, 0) || (_elm_lang$core$Native_Utils.eq(_p9, 2 * n) || (_elm_lang$core$Native_Utils.eq(_p8, n + _p9) || _elm_lang$core$Native_Utils.eq(_p8 + _p9, 3 * n))));
	});
var _user$project$Main$boardWithEdge = F2(
	function (n, board) {
		return A2(
			_elm_lang$core$Dict$map,
			F2(
				function (key, cell) {
					return _elm_lang$core$Native_Utils.update(
						cell,
						{
							state: A2(_user$project$Main$isEdge, n, cell) ? _user$project$Types$UnPlayable(_user$project$Types$Grey) : cell.state
						});
				}),
			board);
	});
var _user$project$Main$shifumi = F2(
	function (piece1, piece2) {
		var val2 = piece2.value;
		var val1 = piece1.value;
		return A2(
			_elm_lang$core$Maybe$withDefault,
			0,
			A2(
				_elm_lang$core$Dict$get,
				{ctor: '_Tuple2', _0: val1, _1: val2},
				_user$project$Data$shifumiTable));
	});
var _user$project$Main$neighbours = F2(
	function (c, size) {
		var y = c.yPos;
		var x = c.xPos;
		var always = {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: x, _1: y - 1},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: x - 1, _1: y},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: x + 1, _1: y},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: x, _1: y + 1},
						_1: {ctor: '[]'}
					}
				}
			}
		};
		return (_elm_lang$core$Native_Utils.cmp(y, size) < 0) ? {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: x - 1, _1: y - 1},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: x + 1, _1: y + 1},
				_1: always
			}
		} : (_elm_lang$core$Native_Utils.eq(y, size) ? {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: x - 1, _1: y - 1},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: x - 1, _1: y + 1},
				_1: always
			}
		} : {
			ctor: '::',
			_0: {ctor: '_Tuple2', _0: x + 1, _1: y - 1},
			_1: {
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: x - 1, _1: y + 1},
				_1: always
			}
		});
	});
var _user$project$Main$update_board = F3(
	function (c, boardSize, board) {
		var convert_neighbours = F5(
			function (piece, n_list, board, cells_todo, cells_done) {
				convert_neighbours:
				while (true) {
					var _p10 = n_list;
					if (_p10.ctor === '[]') {
						return {ctor: '_Tuple2', _0: board, _1: cells_todo};
					} else {
						var _p17 = _p10._1;
						var _p16 = _p10._0;
						var _p11 = A2(_elm_lang$core$Dict$get, _p16, board);
						if (_p11.ctor === 'Just') {
							var _p15 = _p11._0;
							var _p12 = _p15.state;
							if (_p12.ctor === 'Contain') {
								var _p14 = _p12._0;
								if ((!A2(_elm_lang$core$List$member, _p15, cells_done)) && (!_elm_lang$core$Native_Utils.eq(piece.playerId, _p14.playerId))) {
									var new_n_piece = _elm_lang$core$Native_Utils.update(
										_p14,
										{playerId: piece.playerId});
									var new_n_cell = _elm_lang$core$Native_Utils.update(
										_p15,
										{
											state: _user$project$Types$Contain(new_n_piece)
										});
									var new_board = A3(_elm_lang$core$Dict$insert, _p16, new_n_cell, board);
									var _p13 = A2(_user$project$Main$shifumi, piece, _p14);
									switch (_p13) {
										case 1:
											var _v8 = piece,
												_v9 = _p17,
												_v10 = new_board,
												_v11 = cells_todo,
												_v12 = cells_done;
											piece = _v8;
											n_list = _v9;
											board = _v10;
											cells_todo = _v11;
											cells_done = _v12;
											continue convert_neighbours;
										case 2:
											var _v13 = piece,
												_v14 = _p17,
												_v15 = new_board,
												_v16 = A2(
												_elm_lang$core$Basics_ops['++'],
												cells_todo,
												{
													ctor: '::',
													_0: new_n_cell,
													_1: {ctor: '[]'}
												}),
												_v17 = cells_done;
											piece = _v13;
											n_list = _v14;
											board = _v15;
											cells_todo = _v16;
											cells_done = _v17;
											continue convert_neighbours;
										default:
											var _v18 = piece,
												_v19 = _p17,
												_v20 = board,
												_v21 = cells_todo,
												_v22 = cells_done;
											piece = _v18;
											n_list = _v19;
											board = _v20;
											cells_todo = _v21;
											cells_done = _v22;
											continue convert_neighbours;
									}
								} else {
									var _v23 = piece,
										_v24 = _p17,
										_v25 = board,
										_v26 = cells_todo,
										_v27 = cells_done;
									piece = _v23;
									n_list = _v24;
									board = _v25;
									cells_todo = _v26;
									cells_done = _v27;
									continue convert_neighbours;
								}
							} else {
								var _v28 = piece,
									_v29 = _p17,
									_v30 = board,
									_v31 = cells_todo,
									_v32 = cells_done;
								piece = _v28;
								n_list = _v29;
								board = _v30;
								cells_todo = _v31;
								cells_done = _v32;
								continue convert_neighbours;
							}
						} else {
							var _v33 = piece,
								_v34 = _p17,
								_v35 = board,
								_v36 = cells_todo,
								_v37 = cells_done;
							piece = _v33;
							n_list = _v34;
							board = _v35;
							cells_todo = _v36;
							cells_done = _v37;
							continue convert_neighbours;
						}
					}
				}
			});
		var update_board_helper = F3(
			function (board, cells_todo, cells_done) {
				update_board_helper:
				while (true) {
					var _p18 = cells_todo;
					if (_p18.ctor === '[]') {
						return board;
					} else {
						var _p22 = _p18._1;
						var _p21 = _p18._0;
						var _p19 = _p21.state;
						if (_p19.ctor === 'Contain') {
							if (!A2(_elm_lang$core$List$member, _p21, cells_done)) {
								var _p20 = A5(
									convert_neighbours,
									_p19._0,
									A2(_user$project$Main$neighbours, _p21, boardSize),
									board,
									cells_todo,
									cells_done);
								var new_board = _p20._0;
								var new_cells_todo = _p20._1;
								var _v40 = new_board,
									_v41 = new_cells_todo,
									_v42 = {ctor: '::', _0: _p21, _1: cells_done};
								board = _v40;
								cells_todo = _v41;
								cells_done = _v42;
								continue update_board_helper;
							} else {
								var _v43 = board,
									_v44 = _p22,
									_v45 = cells_done;
								board = _v43;
								cells_todo = _v44;
								cells_done = _v45;
								continue update_board_helper;
							}
						} else {
							var _v46 = board,
								_v47 = _p22,
								_v48 = cells_done;
							board = _v46;
							cells_todo = _v47;
							cells_done = _v48;
							continue update_board_helper;
						}
					}
				}
			});
		return A3(
			update_board_helper,
			board,
			{
				ctor: '::',
				_0: c,
				_1: {ctor: '[]'}
			},
			{ctor: '[]'});
	});
var _user$project$Main$hexaBoard = function (n) {
	var makeRowBottom = function (i) {
		return A2(
			_elm_lang$core$List$map,
			function (j) {
				return {ctor: '_Tuple2', _0: j, _1: i};
			},
			A2(_elm_lang$core$List$range, 0, (2 * n) + (n - i)));
	};
	var bottomHalf = A2(
		_elm_lang$core$List$concatMap,
		makeRowBottom,
		A2(_elm_lang$core$List$range, n + 1, 2 * n));
	var makeRowTop = function (i) {
		return A2(
			_elm_lang$core$List$map,
			function (j) {
				return {ctor: '_Tuple2', _0: j, _1: i};
			},
			A2(_elm_lang$core$List$range, 0, n + i));
	};
	var topHalf = A2(
		_elm_lang$core$List$concatMap,
		makeRowTop,
		A2(_elm_lang$core$List$range, 0, n));
	return A3(
		_elm_lang$core$List$foldr,
		F2(
			function (_p23, res) {
				var _p24 = _p23;
				var _p26 = _p24._1;
				var _p25 = _p24._0;
				return A3(
					_elm_lang$core$Dict$insert,
					{ctor: '_Tuple2', _0: _p25, _1: _p26},
					A3(_user$project$Types$Cell, _p25, _p26, _user$project$Types$Empty),
					res);
			}),
		_elm_lang$core$Dict$empty,
		A2(_elm_lang$core$Basics_ops['++'], topHalf, bottomHalf));
};
var _user$project$Main$makePlayers = function (n) {
	var makeDeck = function (id) {
		return A2(
			_elm_lang$core$List$map,
			function (v) {
				return A2(_user$project$Types$Piece, v, id);
			},
			A2(_elm_lang$core$List$range, 0, 14));
	};
	var makePlayer = function (id) {
		return A6(
			_user$project$Types$Player,
			makeDeck(id),
			A2(
				_elm_lang$core$Basics_ops['++'],
				'toto ',
				_elm_lang$core$Basics$toString(id)),
			id,
			_elm_lang$core$Maybe$Nothing,
			_elm_lang$core$Maybe$Nothing,
			0);
	};
	return A3(
		_elm_lang$core$List$foldr,
		F2(
			function (p, res) {
				return A3(_elm_lang$core$Dict$insert, p.id, p, res);
			}),
		_elm_lang$core$Dict$empty,
		A2(
			_elm_lang$core$List$map,
			makePlayer,
			A2(_elm_lang$core$List$range, 1, n)));
};
var _user$project$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$none;
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p27 = msg;
		switch (_p27.ctor) {
			case 'SetPlayerNumber':
				var _p28 = _elm_lang$core$String$toInt(_p27._0);
				if (_p28.ctor === 'Ok') {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						_elm_lang$core$Native_Utils.update(
							model,
							{nbrPlayers: _p28._0}),
						{ctor: '[]'});
				} else {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				}
			case 'InitializePlayers':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{
							players: _user$project$Main$makePlayers(model.nbrPlayers),
							currentPlayer: _elm_lang$core$Maybe$Just(1),
							position: _user$project$Types$PieceSelection,
							availableTurns: _elm_lang$core$Set$fromList(
								A2(_elm_lang$core$List$range, 1, model.nbrPlayers))
						}),
					{ctor: '[]'});
			case 'PickUpPiece':
				var _p32 = _p27._0.playerId;
				var _p29 = A2(
					_elm_lang$core$Maybe$andThen,
					function (_) {
						return _.choice;
					},
					A2(_elm_lang$core$Dict$get, _p32, model.players));
				if (_p29.ctor === 'Nothing') {
					var newPlayers = A3(
						_elm_lang$core$Dict$update,
						_p32,
						function (mv) {
							var _p30 = mv;
							if (_p30.ctor === 'Nothing') {
								return _elm_lang$core$Maybe$Nothing;
							} else {
								return _elm_lang$core$Maybe$Just(
									_elm_lang$core$Native_Utils.update(
										_p30._0,
										{
											deck: A2(
												_elm_lang$core$List$filter,
												function (p) {
													return !_elm_lang$core$Native_Utils.eq(p.value, _p27._0.value);
												},
												_p30._0.deck),
											choice: _elm_lang$core$Maybe$Just(_p27._0)
										}));
							}
						},
						model.players);
					if (_elm_lang$core$Native_Utils.eq(
						_p32,
						_elm_lang$core$Dict$size(model.players))) {
						var players = _elm_lang$core$Dict$values(newPlayers);
						var playersWithScore = A2(
							_elm_lang$core$Dict$map,
							F2(
								function (_p31, p) {
									return _elm_lang$core$Native_Utils.update(
										p,
										{
											score: A3(
												_elm_lang$core$List$foldr,
												F2(
													function (p2, acc) {
														var piece1 = A2(_elm_lang$core$Maybe$withDefault, _user$project$Types$dummyPiece, p.choice);
														var piece2 = A2(_elm_lang$core$Maybe$withDefault, piece1, p2.choice);
														return acc + A2(_user$project$Main$shifumi, piece1, piece2);
													}),
												0,
												players)
										});
								}),
							newPlayers);
						var turnSelectionOrder = A2(
							_elm_lang$core$List$map,
							function (_) {
								return _.id;
							},
							_elm_lang$core$List$reverse(
								A2(
									_elm_lang$core$List$sortBy,
									function (_) {
										return _.score;
									},
									_elm_lang$core$Dict$values(playersWithScore))));
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{
									position: _user$project$Types$TurnSelection,
									turnSelectionOrder: turnSelectionOrder,
									currentPlayer: _elm_lang$core$List$head(turnSelectionOrder),
									players: playersWithScore
								}),
							{ctor: '[]'});
					} else {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{
									players: newPlayers,
									currentPlayer: _elm_lang$core$Maybe$Just(_p32 + 1)
								}),
							{ctor: '[]'});
					}
				} else {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				}
			case 'SelectTurn':
				var _p38 = _p27._0;
				var _p33 = A2(
					_elm_lang$core$Maybe$andThen,
					function (p) {
						return A2(_elm_lang$core$Dict$get, p, model.players);
					},
					model.currentPlayer);
				if (_p33.ctor === 'Nothing') {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						model,
						{ctor: '[]'});
				} else {
					if (A2(_elm_lang$core$Set$member, _p38, model.availableTurns)) {
						var newPlayers = A3(
							_elm_lang$core$Dict$update,
							_p33._0.id,
							function (mv) {
								var _p34 = mv;
								if (_p34.ctor === 'Nothing') {
									return _elm_lang$core$Maybe$Nothing;
								} else {
									return _elm_lang$core$Maybe$Just(
										_elm_lang$core$Native_Utils.update(
											_p34._0,
											{
												turn: _elm_lang$core$Maybe$Just(_p38)
											}));
								}
							},
							model.players);
						var _p35 = function () {
							var _p36 = model.turnSelectionOrder;
							if (_p36.ctor === '[]') {
								return {
									ctor: '_Tuple4',
									_0: _user$project$Types$TurnSelection,
									_1: _elm_lang$core$Maybe$Nothing,
									_2: {ctor: '[]'},
									_3: {ctor: '[]'}
								};
							} else {
								if (_p36._1.ctor === '[]') {
									var plOrd = A2(
										_elm_lang$core$List$map,
										_elm_lang$core$Tuple$first,
										A2(
											_elm_lang$core$List$sortBy,
											_elm_lang$core$Tuple$second,
											A2(
												_elm_lang$core$List$filterMap,
												function (p) {
													return A2(
														_elm_lang$core$Maybe$andThen,
														function (t) {
															return _elm_lang$core$Maybe$Just(
																{
																	ctor: '_Tuple2',
																	_0: function (_) {
																		return _.id;
																	}(p),
																	_1: t
																});
														},
														function (_) {
															return _.turn;
														}(p));
												},
												_elm_lang$core$Dict$values(newPlayers))));
									return {
										ctor: '_Tuple4',
										_0: _user$project$Types$Playing,
										_1: _elm_lang$core$List$head(plOrd),
										_2: {ctor: '[]'},
										_3: plOrd
									};
								} else {
									var _p37 = _p36._1;
									return {
										ctor: '_Tuple4',
										_0: _user$project$Types$TurnSelection,
										_1: _elm_lang$core$List$head(_p37),
										_2: _p37,
										_3: {ctor: '[]'}
									};
								}
							}
						}();
						var newPos = _p35._0;
						var newCurrentPlayer = _p35._1;
						var newTurnSelectionOrder = _p35._2;
						var playingOrder = _p35._3;
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							_elm_lang$core$Native_Utils.update(
								model,
								{
									players: newPlayers,
									availableTurns: A2(_elm_lang$core$Set$remove, _p38, model.availableTurns),
									turnSelectionOrder: newTurnSelectionOrder,
									currentPlayer: newCurrentPlayer,
									position: newPos,
									playingOrder: playingOrder
								}),
							{ctor: '[]'});
					} else {
						return A2(
							_elm_lang$core$Platform_Cmd_ops['!'],
							model,
							{ctor: '[]'});
					}
				}
			default:
				var _p44 = _p27._0._1;
				var _p43 = _p27._0._0;
				var currentPiece = A2(
					_elm_lang$core$Maybe$andThen,
					function (_) {
						return _.choice;
					},
					A2(
						_elm_lang$core$Maybe$andThen,
						function (k) {
							return A2(_elm_lang$core$Dict$get, k, model.players);
						},
						model.currentPlayer));
				var _p39 = {
					ctor: '_Tuple3',
					_0: currentPiece,
					_1: A2(
						_elm_lang$core$Dict$get,
						{ctor: '_Tuple2', _0: _p43, _1: _p44},
						model.board),
					_2: model.position
				};
				_v57_2:
				do {
					if (_p39.ctor === '_Tuple3') {
						if (_p39._0.ctor === 'Nothing') {
							return A2(
								_elm_lang$core$Platform_Cmd_ops['!'],
								model,
								{ctor: '[]'});
						} else {
							if ((_p39._1.ctor === 'Just') && (_p39._2.ctor === 'Playing')) {
								var _p40 = _p39._1._0.state;
								switch (_p40.ctor) {
									case 'UnPlayable':
										return A2(
											_elm_lang$core$Platform_Cmd_ops['!'],
											model,
											{ctor: '[]'});
									case 'Contain':
										return A2(
											_elm_lang$core$Platform_Cmd_ops['!'],
											model,
											{ctor: '[]'});
									default:
										var newPlayers = A3(
											_elm_lang$core$Dict$update,
											_p39._0._0.playerId,
											function (mv) {
												var _p41 = mv;
												if (_p41.ctor === 'Nothing') {
													return _elm_lang$core$Maybe$Nothing;
												} else {
													return _elm_lang$core$Maybe$Just(
														_elm_lang$core$Native_Utils.update(
															_p41._0,
															{choice: _elm_lang$core$Maybe$Nothing}));
												}
											},
											model.players);
										var newCell = A3(
											_user$project$Types$Cell,
											_p43,
											_p44,
											_user$project$Types$Contain(_p39._0._0));
										var newBoard = A3(
											_user$project$Main$update_board,
											newCell,
											model.boardSize,
											A3(
												_elm_lang$core$Dict$insert,
												{ctor: '_Tuple2', _0: _p43, _1: _p44},
												newCell,
												model.board));
										var _p42 = model.playingOrder;
										if (_p42.ctor === '::') {
											if (_p42._1.ctor === '[]') {
												return A2(
													_elm_lang$core$Platform_Cmd_ops['!'],
													_elm_lang$core$Native_Utils.update(
														model,
														{
															board: newBoard,
															players: newPlayers,
															currentPlayer: _elm_lang$core$Maybe$Just(1),
															position: _user$project$Types$PieceSelection,
															availableTurns: _elm_lang$core$Set$fromList(
																A2(_elm_lang$core$List$range, 1, model.nbrPlayers)),
															turnSelectionOrder: {ctor: '[]'},
															playingOrder: {ctor: '[]'}
														}),
													{ctor: '[]'});
											} else {
												return A2(
													_elm_lang$core$Platform_Cmd_ops['!'],
													_elm_lang$core$Native_Utils.update(
														model,
														{
															board: newBoard,
															players: newPlayers,
															currentPlayer: A2(
																_elm_lang$core$Maybe$andThen,
																_elm_lang$core$List$head,
																_elm_lang$core$List$tail(model.playingOrder)),
															playingOrder: A2(
																_elm_lang$core$Maybe$withDefault,
																{ctor: '[]'},
																_elm_lang$core$List$tail(model.playingOrder))
														}),
													{ctor: '[]'});
											}
										} else {
											return A2(
												_elm_lang$core$Platform_Cmd_ops['!'],
												model,
												{ctor: '[]'});
										}
								}
							} else {
								break _v57_2;
							}
						}
					} else {
						break _v57_2;
					}
				} while(false);
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					model,
					{ctor: '[]'});
		}
	});
var _user$project$Main$n = 6;
var _user$project$Main$init = A2(
	_elm_lang$core$Platform_Cmd_ops['!'],
	{
		boardSize: _user$project$Main$n,
		nbrPlayers: 0,
		players: _elm_lang$core$Dict$empty,
		board: A2(
			_user$project$Main$boardWithEdge,
			_user$project$Main$n,
			_user$project$Main$hexaBoard(_user$project$Main$n)),
		availableTurns: _elm_lang$core$Set$empty,
		turnSelectionOrder: {ctor: '[]'},
		playingOrder: {ctor: '[]'},
		currentPlayer: _elm_lang$core$Maybe$Nothing,
		position: _user$project$Types$Config
	},
	{ctor: '[]'});
var _user$project$Main$main = _elm_lang$html$Html$program(
	{init: _user$project$Main$init, view: _user$project$View$view, update: _user$project$Main$update, subscriptions: _user$project$Main$subscriptions})();
